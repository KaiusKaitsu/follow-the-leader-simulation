[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\jalow\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\jalow\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Amazon.com Inc. Java 17.0.5)
[debug]       Load.loadUnit: plugins took 107.8326ms
[debug]       Load.loadUnit: defsScala took 0.5615ms
[debug] [Loading] Scanning directory C:\Users\jalow\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\jalow\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 28.4099 ms
[debug]           Load.resolveProject(global-plugins) took 60.752701ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\jalow\.sbt\1.0\plugins, plugins: List(<none>))) took 120.4313ms
[debug] [Loading] Done in C:\Users\jalow\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 156.538899ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.357799ms
[debug]     Load.loadUnit(file:/C:/Users/jalow/.sbt/1.0/plugins/, ...) took 278.105001ms
[debug]   Load.apply: load took 475.732ms
[debug]   Load.apply: resolveProjects took 6.253501ms
[debug]   Load.apply: finalTransforms took 57.747501ms
[debug]   Load.apply: config.delegates took 7.717201ms
[debug]   Load.apply: Def.make(settings)... took 612.0489ms
[debug]   Load.apply: structureIndex took 244.2003ms
[debug]   Load.apply: mkStreams took 1.9521ms
[info] loading global plugins from C:\Users\jalow\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3411.305101ms
[debug]           Load.loadUnit: plugins took 21.4657ms
[debug]           Load.loadUnit: defsScala took 0.0037ms
[debug] [Loading] Scanning directory C:\Users\jalow\IdeaProjects\Follow the leader -simulation\project
[debug]             Load.loadUnit: mkEval took 5.175599ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\jalow\IdeaProjects\Follow the leader -simulation\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.685301 ms
[info] loading settings for project follow-the-leader-simulation-build from idea.sbt ...
[debug]               Load.resolveProject(follow-the-leader-simulation-build) took 10.641799ms
[debug]             Load.loadTransitive: finalizeProject(Project(id follow-the-leader-simulation-build, base: C:\Users\jalow\IdeaProjects\Follow the leader -simulation\project, plugins: List(<none>))) took 12.993001ms
[debug] [Loading] Done in C:\Users\jalow\IdeaProjects\Follow the leader -simulation\project, returning: (follow-the-leader-simulation-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2581.858399ms
[debug]           Load.loadUnit: cleanEvalClasses took 10.899699ms
[debug]         Load.loadUnit(file:/C:/Users/jalow/IdeaProjects/Follow%20the%20leader%20-simulation/project/, ...) took 2615.2992ms
[debug]       Load.apply: load took 2617.2947ms
[debug]       Load.apply: resolveProjects took 0.176999ms
[debug]       Load.apply: finalTransforms took 10.355701ms
[debug]       Load.apply: config.delegates took 0.382601ms
[debug]       Load.apply: Def.make(settings)... took 56.8338ms
[debug]       Load.apply: structureIndex took 39.0024ms
[debug]       Load.apply: mkStreams took 0.0021ms
[info] loading project definition from C:\Users\jalow\IdeaProjects\Follow the leader -simulation\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4459.5235ms
[debug]     Load.loadUnit: defsScala took 0.0027ms
[debug] [Loading] Scanning directory C:\Users\jalow\IdeaProjects\Follow the leader -simulation
[debug]       Load.loadUnit: mkEval took 0.2321ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.9179 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 34.1011ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\jalow\IdeaProjects\Follow the leader -simulation, plugins: List(<none>))) took 38.6409ms
[debug] [Loading] Done in C:\Users\jalow\IdeaProjects\Follow the leader -simulation, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1285.7396ms
[debug]     Load.loadUnit: cleanEvalClasses took 16.925099ms
[debug]   Load.loadUnit(file:/C:/Users/jalow/IdeaProjects/Follow%20the%20leader%20-simulation/, ...) took 5763.037599ms
[debug] Load.apply: load took 5764.983399ms
[debug] Load.apply: resolveProjects took 0.11ms
[debug] Load.apply: finalTransforms took 25.8129ms
[debug] Load.apply: config.delegates took 0.2902ms
[debug] Load.apply: Def.make(settings)... took 60.413401ms
[debug] Load.apply: structureIndex took 19.9132ms
[debug] Load.apply: mkStreams took 0.002ms
[info] set current project to Follow the leader -simulation (in build file:/C:/Users/jalow/IdeaProjects/Follow%20the%20leader%20-simulation/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 61223 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 61223, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Follow the leader -simulation (in build file:/C:/Users/jalow/IdeaProjects/Follow%20the%20leader%20-simulation/)
[debug] > Exec(idea-shell, None, None)
